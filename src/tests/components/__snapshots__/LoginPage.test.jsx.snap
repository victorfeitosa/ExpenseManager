// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should render LoginPage correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <LoginPage />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h3>
          Login to continue
        </h3>,
        <label>
          Login
          <input
            onChange={[Function]}
            type="text"
          />
        </label>,
        <label>
          Password
          <input
            onChange={[Function]}
            type="password"
          />
        </label>,
        <button>
          Login
        </button>,
      ],
      "onSubmit": undefined,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Login to continue",
        },
        "ref": null,
        "rendered": "Login to continue",
        "type": "h3",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "Login",
            <input
              onChange={[Function]}
              type="text"
            />,
          ],
        },
        "ref": null,
        "rendered": Array [
          "Login",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "onChange": [Function],
              "type": "text",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
        ],
        "type": "label",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "Password",
            <input
              onChange={[Function]}
              type="password"
            />,
          ],
        },
        "ref": null,
        "rendered": Array [
          "Password",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "onChange": [Function],
              "type": "password",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
        ],
        "type": "label",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Login",
        },
        "ref": null,
        "rendered": "Login",
        "type": "button",
      },
    ],
    "type": "form",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h3>
            Login to continue
          </h3>,
          <label>
            Login
            <input
              onChange={[Function]}
              type="text"
            />
          </label>,
          <label>
            Password
            <input
              onChange={[Function]}
              type="password"
            />
          </label>,
          <button>
            Login
          </button>,
        ],
        "onSubmit": undefined,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Login to continue",
          },
          "ref": null,
          "rendered": "Login to continue",
          "type": "h3",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "Login",
              <input
                onChange={[Function]}
                type="text"
              />,
            ],
          },
          "ref": null,
          "rendered": Array [
            "Login",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "onChange": [Function],
                "type": "text",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
          ],
          "type": "label",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "Password",
              <input
                onChange={[Function]}
                type="password"
              />,
            ],
          },
          "ref": null,
          "rendered": Array [
            "Password",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "onChange": [Function],
                "type": "password",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
          ],
          "type": "label",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Login",
          },
          "ref": null,
          "rendered": "Login",
          "type": "button",
        },
      ],
      "type": "form",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
